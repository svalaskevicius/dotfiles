#!/bin/sh

# A simple alternative to [nvidia-xrun](https://github.com/Witko/nvidia-xrun).
#
# Features:
# * OpenGL and Vulkan support
# * OpenCL and CUDA support
# * [Running program without switching to console](https://github.com/Witko/nvidia-xrun/issues/4)
# * Behind the scenes package management: e.g. you can use this script on pure Wayland setup without Nvidia driver installed
#
# 1. curl https://nixos.org/nix/install | sh
# 2. Install kernel headers package for your currently running kernel (not needed on NixOS)
# 3. Edit settings at the top of script to match your needs
# 4. Run your program via this script
# if systemd is used and you need sound, login to $console prior https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=747882
# if you can't stand cursor bug, start this script from console, not another X https://bugs.launchpad.net/ubuntu/+source/plasma-workspace/+bug/1684240
#
# based on https://github.com/dukzcry/crap/blob/master/primerun/primerun.sh

#
### configuration ###
display=2
console=2
tmpdir=$XDG_RUNTIME_DIR/nvidia
# see alternative packages with "nix-instantiate --eval -E 'with import <nixpkgs> {}; linuxPackages.nvidiaPackages'"
package="linuxPackages.nvidia_x11"
busid=$($(nix-build --no-out-link '<nixpkgs>' -A pciutils)/bin/lspci | awk '/3D controller/{gsub(/\./,":",$1); print $1}')
kernel="$(uname -r)"

cleanEnv() {
  unset DBUS_SESSION_BUS_ADDRESS
  unset DISPLAY
  unset XAUTHORITY
  unset XDG_SEAT
  unset XDG_RUNTIME_DIR
  unset XDG_SEAT_PATH
  unset XDG_CONFIG_DIRS
  unset XDG_DATA_DIRS
  unset XDG_DESKTOP_PORTAL_PATH
  unset XDG_GREETER_DATA_DIR
  unset XDG_RUNTIME_DIR
  unset XDG_SEAT
  unset XDG_SEAT_PATH
  unset XDG_SESSION_CLASS
  unset XDG_SESSION_DESKTOP
  unset XDG_SESSION_ID
  unset XDG_SESSION_PATH
  unset XDG_SESSION_TYPE
  unset XDG_VTNR
  unset XMONAD_INIT_DONE
  unset XMONAD_XMESSAGE
}

cleanEnv

mkdir -p $tmpdir/modules
cat > $tmpdir/xorg.conf << EOF
Section "Files"
  ModulePath "$(nix-build --no-out-link '<nixpkgs>' -A xorg.xf86inputlibinput)/lib/xorg/modules/input"
  ModulePath "$(nix-build --no-out-link '<nixos>' -A $package.bin)/lib/xorg/modules"
  ModulePath "$tmpdir/modules"
EndSection

Section "InputClass"
  Identifier "libinput pointer catchall"
  MatchIsPointer "on"
  MatchDevicePath "/dev/input/event*"
  Driver "libinput"
EndSection
Section "InputClass"
  Identifier "libinput keyboard catchall"
  MatchIsKeyboard "on"
  MatchDevicePath "/dev/input/event*"
  Driver "libinput"
EndSection

Section "Monitor"
  Identifier "Monitor[0]"
EndSection
Section "Module"
  Load "modesetting"
EndSection
Section "Device"
  Identifier "nvidia"
  Driver "nvidia"
  BusID "$busid"
  Option "AllowEmptyInitialConfiguration"
EndSection
Section "InputClass"
  Identifier "libinputConfiguration"
  MatchIsTouchpad "on"
  
  Driver "libinput"
  Option "AccelProfile" "adaptive"
  Option "AccelSpeed" "0.6"
  Option "ButtonMapping" "1 0 3"
  
  
  Option "LeftHanded" "off"
  Option "MiddleEmulation" "off"
  Option "NaturalScrolling" "on"
  
  Option "ScrollMethod" "twofinger"
  Option "HorizontalScrolling" "on"
  Option "SendEventsMode" "enabled"
  Option "Tapping" "on"
  Option "TappingDragLock" "on"
  Option "DisableWhileTyping" "on"
  
EndSection
EOF
### end of configuration ###

red='\033[0;31m'
if [ ! -d $tmpdir ]; then
  echo -e "$red Given tmpdir doesn't exist"
  exit 1
fi
if [ "$1" == "" ]; then
  echo -e "$red Give path to game as argument"
  exit 1
fi
if [ "$busid" == "" ]; then
  echo -e "$red No Optimus card found"
  exit 1
fi
# module nvidia_drm is in use
if [ "$(sudo fgconsole)" == "$console" ]; then
  echo -e "$red You need to run $0 from another console"
  exit 1
fi
export XAUTHORITY=$HOME/.Xauthority-nvidia

cat > $tmpdir/session << EOF
#!/bin/sh
$(nix-build --no-out-link '<nixpkgs>' -A xorg.xrandr)/bin/xrandr --setprovideroutputsource modesetting NVIDIA-0
$(nix-build --no-out-link '<nixpkgs>' -A xorg.xrandr)/bin/xrandr --auto
export LD_LIBRARY_PATH="$(nix-build --no-out-link -E '
  with import <nixos> {};

  buildEnv {
    name = "nvidia-libs";
    paths = [
      libglvnd
      ('$package'.override {
        libsOnly = true;
        kernel = null;
      })
    ];
  }
')/lib`
  `:$(nix-build --no-out-link -E '
    with import <nixos> {};

    buildEnv {
      name = "nvidia-libs-32";
      paths = with pkgsi686Linux; [
        libglvnd
        ('$package'.override {
          libsOnly = true;
          kernel = null;
        })
      ];
  }')/lib"
export PATH="$(nix-build --no-out-link -E '
 with import <nixos> {};

 buildEnv {
   name = "nvidia-bin";
   paths = [ '$package'.settings '$package'.bin ];
 }
')/bin:\$PATH"
export VK_ICD_FILENAMES="$(nix-build --no-out-link -E '
  with import <nixos> {};

  '$package'.override {
    libsOnly = true;
    kernel = null;
  }
')/share/vulkan/icd.d/nvidia.json";
export OCL_ICD_VENDORS="$(nix-build --no-out-link -E '
  with import <nixos> {};

  '$package'.override {
    libsOnly = true;
    kernel = null;
  }
')/etc/OpenCL/vendors/nvidia.icd";
# https://bugzilla.gnome.org/show_bug.cgi?id=774775
export GDK_BACKEND=x11
$@
EOF
chmod +x $tmpdir/session

# switch user
cat > $tmpdir/wrapper << EOF
#!/bin/sh
sudo chown $USER $XAUTHORITY
sudo -u $USER $tmpdir/session
EOF
chmod +x $tmpdir/wrapper

# dixRegisterPrivateKey: Assertion `!global_keys[type].created' failed
cat > $tmpdir/X << EOF
#!/bin/sh
LD_LIBRARY_PATH="$(nix-build --no-out-link '<nixpkgs>' -A libglvnd)/lib"
exec $(nix-build --no-out-link '<nixpkgs>' -A xorg.xorgserver)/bin/X "\$@"
EOF
chmod +x $tmpdir/X

get_major_version()
{
  kernel_compile_h=$1
  kernel_cc_string=`cat ${kernel_compile_h} | grep LINUX_COMPILER | cut -f 2 -d '"'`
  kernel_cc_version=`echo ${kernel_cc_string} | grep -o '[0-9]\+\.[0-9]\+' | head -n 1`
  kernel_cc_major=`echo ${kernel_cc_version} | cut -d '.' -f 1`
}

if [ -e /etc/nixos ]; then
  # complicated to always check non-nixos rules on nixos
  nvidia="$(nix-build --no-out-link -E '
    with import <nixos/nixos> {};

    let
      custom = config.boot.kernelPackages;
    in (pkgs.'$package'.overrideAttrs (oldAttrs: rec {
      kernelVersion = "'$kernel'";
      kernel = custom.kernel.dev;
    })).bin
  ')"
else
  # needed for arch
  sudo ln -s /lib/modules/$kernel/build /lib/modules/$kernel/source
  get_major_version /lib/modules/$kernel/source/include/generated/compile.h
  nvidia="$(nix-build --no-out-link -E '
    with import <nixos> {};

    (('$package'.override { stdenv = overrideCC stdenv gcc'$kernel_cc_major'; }).overrideAttrs (oldAttrs: rec {
      kernelVersion = "'$kernel'";
      kernel = "";
      NIX_ENFORCE_PURITY = 0;
    })).bin
  ')"
fi

sudo tee '/sys/bus/pci/devices/0000:01:00.0/power/control' <<<on

# echo 'waiting for 10 seconds for nvidia to wake up'
# echo $tmpdir
# sleep 10

sudo modprobe ipmi_devintf
for m in nvidia nvidia-modeset nvidia-drm nvidia-uvm
do
  sudo insmod $nvidia/lib/modules/$kernel/misc/$m.ko
done

# https://bugs.freedesktop.org/show_bug.cgi?id=94577
ln -sf $(nix-build --no-out-link '<nixpkgs>' -A xorg.xorgserver)/lib/xorg/modules/* $tmpdir/modules
rm $tmpdir/modules/libglamoregl.so

xinit=$(nix-build --no-out-link '<nixpkgs>' -A xorg.xinit)/bin


startx="$xinit/startx"


# xinit is unsecure
sudo PATH=$xinit:$PATH $startx $tmpdir/wrapper -- $tmpdir/X :$display -config $tmpdir/xorg.conf -auth "$XAUTHORITY" -dpi 192 -logfile $tmpdir/X.log vt$console
sudo chown $USER $XAUTHORITY

for m in nvidia_uvm nvidia_drm nvidia_modeset nvidia
do
  sudo rmmod $m
done
sudo tee '/sys/bus/pci/devices/0000:01:00.0/power/control' <<<auto

